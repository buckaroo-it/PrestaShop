{"ast":null,"code":"import { ref, provide, inject, computed } from 'vue';\nimport CountrySelect from '../CountrySelect.vue';\nimport { useApi } from \"../../lib/api\";\nimport { usePaymentCountryConfig } from \"../../lib/paymentCountryConfig\";\nimport { useToastr } from \"../../lib/toastr\";\nimport { useCountries } from \"../../lib/countries\";\nexport default {\n  name: \"DefaultPaymentConfig.vue\",\n  props: ['payment'],\n  components: {\n    CountrySelect\n  },\n  watch: {\n    selectCountry(value) {\n      if (!this.config.countries) {\n        this.config.countries = [];\n      }\n      this.config.countries.push(value);\n    },\n    countries: {\n      handler(value, oldValue) {\n        this.config.countries = value;\n      },\n      deep: true\n    },\n    'config.payment_fee'(value) {\n      if (value) {\n        if (value < 0) {\n          this.config.payment_fee = 0;\n          return;\n        }\n        if (value > 999) {\n          this.config.payment_fee = 999;\n          return;\n        }\n        this.config.payment_fee = parseFloat(value.toString().match(/\\d+/g).join(''));\n      }\n      this.config.payment_fee = '';\n    },\n    payment() {\n      this.setEndpoint(`payment/${this.payment.name}/config`);\n      this.getConfig();\n    },\n    selectedChannel(value) {\n      this.setEndpoint(`/channel/${this.selectedChannel.id}/payment/${this.payment.name}/config`);\n      this.getConfig();\n    }\n  },\n  setup(props) {\n    const selectedChannel = inject('selectedChannel');\n    const {\n      get,\n      data,\n      loading,\n      post,\n      setEndpoint\n    } = useApi(`/channel/${selectedChannel.value.id}/payment/${props.payment.name}/config`);\n    const {\n      toastr\n    } = useToastr();\n    const {\n      countries\n    } = useCountries();\n    const selectCountry = ref(null);\n    const showAllCountries = ref(false);\n    const config = ref({\n      mode: 'off',\n      frontend_label: '',\n      payment_fee: null,\n      min_order_amount: null,\n      max_order_amount: null,\n      countries: []\n    });\n    provide('config', config);\n    const getConfig = () => {\n      get().then(() => {\n        if (data.value.status) {\n          if (data.value.config) {\n            config.value = data.value.config.value;\n            return;\n          }\n          config.value = {\n            mode: 'off',\n            frontend_label: '',\n            payment_fee: null,\n            min_order_amount: null,\n            max_order_amount: null,\n            countries: []\n          };\n        }\n      });\n    };\n    const updateConfig = () => {\n      post(config.value).then(() => {\n        if (data.value.status) {\n          toastr.success(`Settings successfully updated.`);\n          return;\n        }\n        toastr.error(`Something went wrong.`);\n      });\n    };\n    const setMode = mode => {\n      config.value.mode = mode;\n      props.payment.mode = mode;\n    };\n    const addAllCountries = () => {\n      config.value.countries = countries.value;\n    };\n    const removeAllCountries = () => {\n      config.value.countries = [];\n    };\n    const enabledCountries = computed(() => {\n      if (config.value.countries) {\n        if (config.value.countries.length > 10 && !showAllCountries.value) {\n          return config.value.countries.slice(0, 10);\n        }\n      }\n      return config.value.countries ?? [];\n    });\n    const removeCountry = country => {\n      config.value.countries = config.value.countries.filter(ec => ec.id !== country.id);\n    };\n    getConfig();\n    return {\n      removeCountry,\n      removeAllCountries,\n      config,\n      showAllCountries,\n      addAllCountries,\n      updateConfig,\n      setEndpoint,\n      getConfig,\n      setMode,\n      loading,\n      selectedChannel,\n      selectCountry,\n      enabledCountries\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}