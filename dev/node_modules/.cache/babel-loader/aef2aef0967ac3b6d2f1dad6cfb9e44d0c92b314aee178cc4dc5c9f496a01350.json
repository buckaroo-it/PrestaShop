{"ast":null,"code":"import { computed, ref, watch } from 'vue';\nimport { useApi } from '../../lib/api';\nimport GiftcardModal from './GiftcardModal.vue';\nexport default {\n  name: \"ActiveCreditcards.vue\",\n  props: [\"modelValue\"],\n  components: {},\n  watch: {\n    modelValue(value) {\n      this.activatedCreditcards = value;\n    },\n    activatedCreditcards: {\n      handler(value, oldValue) {\n        this.$emit('update:modelValue', value);\n      },\n      deep: true\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const query = ref('');\n    const creditcards = ref([]);\n    const customGiftcards = ref([]);\n    const activatedCreditcards = ref(props.modelValue ?? []);\n    const bigcommerceAppUrl = import.meta.env.VITE_BUCKAROO_BIGCOMMERCE_APP_URL;\n    const {\n      get,\n      data\n    } = useApi('creditcards');\n    get().then(() => {\n      if (data.value.status) {\n        creditcards.value = data.value.creditcards;\n      }\n    });\n    const filteredCreditcards = computed(() => {\n      if (query.value.trim().length === 0) {\n        return creditcards.value;\n      }\n      return creditcards.value.filter(creditcard => creditcard.name.includes(query.value));\n    });\n    const toggleCreditcard = creditcard => {\n      if (activatedCreditcards.value.find(cc => cc.id === creditcard.id)) {\n        activatedCreditcards.value = activatedCreditcards.value.filter(cc => cc.id !== creditcard.id);\n        return;\n      }\n      activatedCreditcards.value.push(creditcard);\n    };\n    return {\n      query,\n      customGiftcards,\n      filteredCreditcards,\n      toggleCreditcard,\n      activatedCreditcards,\n      bigcommerceAppUrl\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}